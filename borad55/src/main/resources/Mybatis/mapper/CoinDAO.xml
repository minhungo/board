<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.demo.minhun.dao.CoinDAO">

    <!-- 코인 충전, 답변채택, 환전신청 -->
    <insert id="ChargeCoin" parameterType="com.demo.minhun.dto.ChargeNRefundDTO">
        insert into
            coin (payAmount, payChargeDate, signupId, payImpUid, payMerchantUid, possibleRefund)
        values
            (#{payAmount}, current_date, #{signupId}, #{payImpUid}, #{payMerchantUid}, #{possibleRefund})
    </insert>

    <!-- 코인 환불 -->
    <update id="refundCoin" parameterType="com.demo.minhun.dto.ChargeNRefundDTO">
        update
            coin
        set
            possibleRefund = #{possibleRefund}, payAmount = #{payAmount}
        where
            payImpUid = #{payImpUid}
    </update>

    <!-- 내 코인 충전 및 사용 기록 가져오기 (ID)-->
    <select id="getMyCoinRecordById" resultType="com.demo.minhun.dto.ChargeNRefundDTO">
        select
            s.signup_id, c.payAmount, c.payChargeDate, c.payImpUid, c.payMerchantUid , c.possibleRefund
        from
            signup s inner join coin c
        on
            s.signup_id = c.signupId
        where
            s.signup_id = #{signup_id}
        order by
            c.payChargeDate desc nulls last
    </select>

    <!-- 가장 최신 코인 현황 가져오기 (ID)-->
    <select id="getMyCurrentCoinById" resultType="int">
        select
            sum(c.payAmount)
        from
            signup s inner join coin c
        on
            s.signup_id = c.signupId
        where
            s.signup_id = #{signup_id}
        order by
            c.payChargeDate desc nulls last
    </select>
<!--    <select id="getMyCurrentCoinById" resultType="com.demo.minhun.dto.ChargeNRefundDTO">-->
<!--        select-->
<!--            g.signup_id, g.currentCoin-->
<!--        from-->
<!--            (select-->
<!--                *-->
<!--            from-->
<!--                signup s inner join coin c-->
<!--            on-->
<!--                s.signup_id = c.signupId-->
<!--            where-->
<!--                s.signup_id = #{signup_id}-->
<!--            order by-->
<!--                c.payChargeDate desc nulls last) g-->
<!--        where-->
<!--            rowNum = 1-->
<!--    </select>-->

    <!-- 내 코인 충전 및 사용 기록 가져오기 (Nickname)-->
    <select id="getMyCoinRecordByNickname" resultType="com.demo.minhun.dto.ChargeNRefundDTO">
        select
            s.signup_id, c.payAmount, c.payChargeDate, c.payImpUid, c.payMerchantUid, c.possibleRefund
        from
            signup s inner join coin c
        on
            s.signup_id = c.signupId
        where
            s.signup_nickname = #{signup_nickname}
        order by
            c.payChargeDate desc nulls last
    </select>

    <!-- 가장 최신 코인 현황 가져오기 (Nickname)-->
    <select id="getMyCurrentCoinByNickname" resultType="com.demo.minhun.dto.ChargeNRefundDTO">
        select
            sum(c.payAmount)
        from
            signup s inner join coin c
        on
            s.signup_id = c.signupId
        where
            s.signup_nickname = #{signup_nickname}
        order by
            c.payChargeDate desc nulls last
    </select>

    <!-- nickname 으로 id 찾기 -->
    <select id="getMyIdByNickname" resultType="com.demo.minhun.dto.ChargeNRefundDTO">
        select
            g.signup_id
        from
            (select
                *
            from
                signup s inner join coin c
            on
                s.signup_id = c.signupId
            where
                s.signup_nickname = #{signup_nickname}
            order by
                c.payChargeDate desc nulls last) g
        where
            rowNum = 1
    </select>


</mapper>

